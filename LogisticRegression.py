# -*- coding: utf-8 -*-
"""Logistic_Regression_Demo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mK6cqD0oM-0ujXymlnxUP5ixZmNbwKEh
"""

import sklearn
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from google.colab import files

data= files.upload()
data= pd.read_csv('suv_data.csv')
data.head()

X1 = data.loc[data['Purchased']==1] 
X0 = data.loc[data['Purchased']==0] 
x1 = X1.iloc[:,[2,3]].values    # x1 : mua
x0 = X0.iloc[:,[2,3]].values    # x0 : không mua

# Hiển thị dữ liệu lên biểu đồ
plt.scatter(x0[:,0],x0[:,1],c='blue')
plt.scatter(x1[:,0],x1[:,1],c='red')
plt.xlabel('Tuổi tác (năm)')
plt.ylabel('Mức lương(nghìn)')
plt.show()

from re import X
# Scale dữ liệu
X = (data.iloc[:,[2,3]].values).astype('float64')
y = data.iloc[:,[4]].values

for i in range(0,len(X)):
  X[i][0] = X[i][0]/60
  X[i][1] = X[i][1]/150000
print(X[0])

# Hàm sigmoid
def sigmoid(x):
  return 1/(1+ np.exp(-x))
# Thêm cột 1 vào
ones = np.ones((len(X),1))
x = np.concatenate((ones,X), axis=1)
w = np.array([0.,0.1,0.1]).reshape(-1,1)
print(x)
print('---------')

# Lặp
numOfIteration = 1000
cost = np.zeros((numOfIteration,1))
learning_rate = 0.01
numloop = []

for i in range (0, numOfIteration):
  # Tính giá trị dự đoán
  y_predict = sigmoid(np.dot(x,w))
  cost[i] = -np.sum(np.multiply(y, np.log(y_predict)) + np.multiply(1-y, np.log(1-y_predict)))
  # Gradient descent
  w = w - learning_rate * np.dot(x.T, y_predict-y)
  numloop.append(i)
numloop = np.array(numloop)

print('Sai số khởi điểm: ' + str(cost[0]))
print('Sai số cuối cùng: ' + str(cost[999]))
print('Trọng số cuối cùng: ')
print(w)
print("Lost function: ")
plt.plot(numloop,cost)
plt.show()

# Độ chính xác
a = 0.00
for i in range(0, len(y_predict)):
  if y_predict[i] < 0.5 :
    y_predict[i] = 0
  else:
    y_predict[i] = 1
  if y_predict[i] == y[i]:
    a += 1
print('Độ chính xác: ' + str((a/len(y))*100) + '%')

# Hiển thị dữ liệu sau khi phân chia
a1 = []
a0 = []
for i in range(0, len(y_predict)):
  if y_predict[i] == 1:
    a1.append(X[i])
  else:
    a0.append(X[i])
z1 = np.array(a1)
z0 = np.array(a0)
plt.scatter(z1[:,0],z1[:,1], c='red')
plt.scatter(z0[:,0],z0[:,1], c='blue')
plt.show()

# Nhập dữ liệu cần dự đoán [[tuổi tác, lương]]
input = [[20.00, 30000.00]]
need_pre = np.array(input)
print('Lương: ' + str(need_pre[0,1])+ ' (nghìn đô)')
print('Tuổi tác: ' + str(need_pre[0,1])+ ' (tuổi)')
need_pre[0,0] /= 60
need_pre[0,1] /= 150000

# Dự đoán
ones = np.ones((len(need_pre),1))
need_pre = np.concatenate((ones, need_pre), axis = 1)
result = sigmoid(np.dot(need_pre,w))
print(result)
if result >= 0.5:
  print('=> Kết quả: Mua')
else:
  print('=> Kết quá: Không mua')

# Đổi chiều biểu đồ
plt.scatter(z0[:,0]*60,z0[:,1]*150000,c='blue')
plt.scatter(z1[:,0]*60,z1[:,1]*150000,c='red')
plt.xlabel('Tuổi tác (năm) ')
plt.ylabel('Mức lương (nghìn) ')
plt.show()

from sklearn.metrics import accuracy_score
accuracy_score(y,y_predict)